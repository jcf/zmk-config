/* -*- mode: c -*- */
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define LH(keycode) LC(LS(LG(LA(keycode))))
#define LM(keycode) LC(LS(LA(keycode)))

#define HYPER LC(LS(LG(LALT)))
#define MEH LC(LS(LALT))

// layers
#define DEFAULT 0
#define SYMBOLS 1
#define NUMBERS 2
#define MAGIC 3

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1          &kp F2    &kp F3      &kp F4       &kp F5                                                                                             &kp F6       &kp F7       &kp F8      &kp F9     &kp F10
            &kp GRAVE       &kp N1    &kp N2      &kp N3       &kp N4       &kp N5                                                                        &kp N6  &kp N7       &kp N8       &kp N9      &kp N0     &none
            &none           &kp Y     &kp C       &hm MEH L    &hm HYPER M  &kp K                                                                         &kp Z   &hm HYPER F  &hm MEH U    &kp COMMA   &kp SQT    &none
            &none           &kp I     &hm LALT S  &hm LSHFT R  &hm LCTRL T  &kp G                                                                         &kp P   &hm RCTRL N  &hm RSHFT E  &hm LALT A  &kp O      &kp EQUAL
            &none           &kp Q     &kp V       &kp W        &hm LGUI D   &kp J   &key_repeat         &kp LH(L) &none  &none  &none    &none            &kp B   &hm RGUI H   &kp FSLH     &kp DOT     &kp X      &none
            &magic MAGIC 0  &kp HOME  &kp END     &kp LEFT     &kp RIGHT            &lt SYMBOLS SPACE   &kp BKSP  &none  &none  &kp TAB  &lt NUMBERS RET          &kp UP       &kp DOWN     &none       &none      &kp PG_DN
            >;
        };

        symbols_layer {
            bindings = <
            &trans  &trans  &trans    &trans     &trans                                                                               &trans    &trans    &trans    &trans     &trans
            &trans  &trans  &trans    &trans     &trans     &trans                                                        &trans      &trans    &trans    &trans    &trans     &trans
            &trans  &trans  &trans    &trans     &trans     &trans                                                        &kp CARET   &kp LBKT  &kp RBKT  &kp HASH  &kp SEMI   &trans
            &trans  &trans  &kp LALT  &kp LSHFT  &kp LCTRL  &trans                                                        &kp DOLLAR  &kp LPAR  &kp RPAR  &kp AMPS  &kp EXCL   &trans
            &trans  &trans  &trans    &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans     &trans     &kp PLUS    &kp LBRC  &kp RBRC  &kp AT    &kp QMARK  &trans
            &trans  &trans  &trans    &trans     &trans             &trans  &trans  &trans  &trans  &kp UNDER  &kp MINUS              &trans    &trans    &trans    &trans     &trans
            >;
        };

        numbers_layer {
            bindings = <
            &trans  &trans     &trans  &trans  &trans                                                                         &trans     &trans     &trans    &trans  &trans
            &trans  &trans     &trans  &trans  &trans  &trans                                                         &trans  &trans     &trans     &trans    &trans  &trans
            &trans  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT                                                       &trans  &trans     &trans     &trans    &trans  &trans
            &trans  &kp SEMI   &kp N4  &kp N5  &kp N6  &kp EQUAL                                                      &trans  &kp RCTRL  &kp RSHFT  &kp LALT  &trans  &trans
            &trans  &kp GRAVE  &kp N1  &kp N2  &kp N3  &trans     &trans  &trans   &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans  &trans
            &trans  &trans     &trans  &trans  &trans             &kp N0  &kp DOT  &kp MINUS  &trans  &trans  &trans          &trans     &trans     &trans    &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };

        /* One transparent layer for your creative use.

        layer_N {
            bindings = <
            &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
        */
    };
};
